services:
  # API Service
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: api
    ports:
      - "8000:8000"
    environment:
      - POSTGRES_HOST=db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=dataflow
      - MINIO_HOST=minio
      - MINIO_PORT=9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
      - DAGSTER_HOST=dagster
      - DAGSTER_PORT=3000
      - LOG_LEVEL=INFO
      - LOG_JSON_FORMAT=true
    depends_on:
      - db
      - minio
      - dagster
    volumes:
      - ./src:/app/src
    networks:
      - dataflow-network

  # Dagster Orchestration
  dagster:
    build:
      context: .
      dockerfile: Dockerfile
      target: dagster
    ports:
      - "3000:3000"
    environment:
      - POSTGRES_HOST=db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=dataflow
      - MINIO_HOST=minio
      - MINIO_PORT=9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
      - DAGSTER_HOME=/opt/dagster/dagster_home
      - LOG_LEVEL=INFO
      - LOG_JSON_FORMAT=true
    volumes:
      - dagster-data:/opt/dagster/dagster_home
      - ./src:/app/src
    depends_on:
      - db
      - minio
    networks:
      - dataflow-network

  # Database (PostgreSQL)
  db:
    image: postgres:15
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=dataflow
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - dataflow-network

  # Object Storage (MinIO)
  minio:
    image: minio/minio:latest
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    volumes:
      - minio-data:/data
    command: server /data --console-address ":9001"
    networks:
      - dataflow-network

  # Evidence Dashboard
  evidence:
    image: evidencedev/devenv:latest
    ports:
      - "9002:3000"
    volumes:
      - ./integrations/evidence:/evidence-workspace
    environment:
      - DATABASE_URL=postgres://postgres:postgres@db:5432/dataflow
    depends_on:
      - db
    networks:
      - dataflow-network
    mem_limit: 2g

  # Logging (Grafana, Loki, Promtail)
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - dataflow-network

  loki:
    image: grafana/loki:latest
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - loki-data:/loki
    networks:
      - dataflow-network

  promtail:
    image: grafana/promtail:latest
    volumes:
      - /var/log:/var/log
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    networks:
      - dataflow-network

  # Optional: Monitoring with Prometheus (Stretch goal)
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus:/etc/prometheus
      - prometheus-data:/prometheus
    networks:
      - dataflow-network

networks:
  dataflow-network:
    driver: bridge

volumes:
  postgres-data:
  minio-data:
  dagster-data:
  grafana-data:
  loki-data:
  prometheus-data:
